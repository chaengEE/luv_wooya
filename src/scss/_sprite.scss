// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$ico-cancel-name: 'ico_cancel';
$ico-cancel-x: 64px;
$ico-cancel-y: 0px;
$ico-cancel-offset-x: -64px;
$ico-cancel-offset-y: 0px;
$ico-cancel-width: 34px;
$ico-cancel-height: 34px;
$ico-cancel-total-width: 98px;
$ico-cancel-total-height: 98px;
$ico-cancel-image: '../img/sprite.png';
$ico-cancel: (64px, 0px, -64px, 0px, 34px, 34px, 98px, 98px, '../img/sprite.png', 'ico_cancel', );
$ico-like-full-name: 'ico_like_full';
$ico-like-full-x: 34px;
$ico-like-full-y: 64px;
$ico-like-full-offset-x: -34px;
$ico-like-full-offset-y: -64px;
$ico-like-full-width: 32px;
$ico-like-full-height: 32px;
$ico-like-full-total-width: 98px;
$ico-like-full-total-height: 98px;
$ico-like-full-image: '../img/sprite.png';
$ico-like-full: (34px, 64px, -34px, -64px, 32px, 32px, 98px, 98px, '../img/sprite.png', 'ico_like_full', );
$ico-like-name: 'ico_like';
$ico-like-x: 66px;
$ico-like-y: 64px;
$ico-like-offset-x: -66px;
$ico-like-offset-y: -64px;
$ico-like-width: 32px;
$ico-like-height: 32px;
$ico-like-total-width: 98px;
$ico-like-total-height: 98px;
$ico-like-image: '../img/sprite.png';
$ico-like: (66px, 64px, -66px, -64px, 32px, 32px, 98px, 98px, '../img/sprite.png', 'ico_like', );
$ico-remove-name: 'ico_remove';
$ico-remove-x: 64px;
$ico-remove-y: 34px;
$ico-remove-offset-x: -64px;
$ico-remove-offset-y: -34px;
$ico-remove-width: 20px;
$ico-remove-height: 20px;
$ico-remove-total-width: 98px;
$ico-remove-total-height: 98px;
$ico-remove-image: '../img/sprite.png';
$ico-remove: (64px, 34px, -64px, -34px, 20px, 20px, 98px, 98px, '../img/sprite.png', 'ico_remove', );
$ico-save-name: 'ico_save';
$ico-save-x: 0px;
$ico-save-y: 64px;
$ico-save-offset-x: 0px;
$ico-save-offset-y: -64px;
$ico-save-width: 34px;
$ico-save-height: 34px;
$ico-save-total-width: 98px;
$ico-save-total-height: 98px;
$ico-save-image: '../img/sprite.png';
$ico-save: (0px, 64px, 0px, -64px, 34px, 34px, 98px, 98px, '../img/sprite.png', 'ico_save', );
$ico-ukulele-logo-name: 'ico_ukulele_logo';
$ico-ukulele-logo-x: 0px;
$ico-ukulele-logo-y: 0px;
$ico-ukulele-logo-offset-x: 0px;
$ico-ukulele-logo-offset-y: 0px;
$ico-ukulele-logo-width: 64px;
$ico-ukulele-logo-height: 64px;
$ico-ukulele-logo-total-width: 98px;
$ico-ukulele-logo-total-height: 98px;
$ico-ukulele-logo-image: '../img/sprite.png';
$ico-ukulele-logo: (0px, 0px, 0px, 0px, 64px, 64px, 98px, 98px, '../img/sprite.png', 'ico_ukulele_logo', );
$spritesheet-width: 98px;
$spritesheet-height: 98px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($ico-cancel, $ico-like-full, $ico-like, $ico-remove, $ico-save, $ico-ukulele-logo, );
$spritesheet: (98px, 98px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
